service: serverless-ws-test

plugins:
  - serverless-s3-sync

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-central-1
  lambdaHashingVersion: 20201221
  websocketsApiName: websockets-api-${self:provider.stage}

  stage: ${opt:stage, 'dev'}

  environment:
    APIG_ENDPOINT:
      Fn::Join:
        - ""
        - - Ref: WebsocketsApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}
    CONNECTION_TABLE:
      Ref: WebsocketConnectionTable
    USER_TABLE:
      Ref: UserTable

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:PutItem
        - dynamodb:Query
      Resource:
        - Fn::GetAtt:
            - WebsocketConnectionTable
            - Arn
        - Fn::GetAtt:
            - UserTable
            - Arn
        - Fn::Join:
            - ""
            - - Fn::GetAtt:
                  - WebsocketConnectionTable
                  - Arn
              - /index/*
        - Fn::Join:
            - ""
            - - Fn::GetAtt:
                  - UserTable
                  - Arn
              - /index/*
functions:
  connectionHandler:
    handler: src/handler.connectionHandler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
      - websocket:
          route: broadcast
      - websocket:
          route: getUsers
resources:
  Resources:
    WebsocketConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UsernameIndex
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: username
            KeyType: HASH
    WebSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
    WebSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "WebSite"
                    },
                    "/*"
                  ]
                ]
custom:
  siteName: GITHUB_SITE_NAME
  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: static

